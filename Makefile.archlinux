# Generic makefile for Fedora packages build
#
# For "API" documentation check Makefile.generic
#
# Variables supposed to be in component's Makefile.builder:
#  ARCH_BUILD_DIRS - list of archlinux directories containing build sripts (PKGFILES...)


### Variables required Makefile.generic
# Use spec files list as PACKAGE_LIST
PACKAGE_LIST = $(ARCH_BUILD_DIRS)
DIST_BUILD_DIR = /home/user

### Local variables
RUN_AS_USER = user
PKGS_DIR = pkgs/

# Use += to allow Makefile.builder define some initial value
MAKEPKG_BUILD_VARIABLES += ""

### Targets required by Makefile.generic to build packages
dist-prepare-chroot: $(CHROOT_DIR)/home/user/.prepared_base
	# Need pts, dev, and sys for pgp initialization things
	@if [ ! -r $(CHROOT_DIR)/proc/cpuinfo ]; then\
		sudo mount -t proc proc $(CHROOT_DIR)/proc;\
		sudo mount --bind /dev $(CHROOT_DIR)/dev;\
		sudo mount --bind /dev/pts $(CHROOT_DIR)/dev/pts;\
		sudo mount --bind /sys $(CHROOT_DIR)/sys;\
	fi
	mkdir -p $(BUILDER_REPO_DIR)/pkgs
	@if ! [ -d $(CHROOT_DIR)/tmp/qubes-pkgs-mirror-repo/pkgs ]; then\
		mkdir -p $(CHROOT_DIR)/tmp/qubes-pkgs-mirror-repo;\
		sudo mount --bind $(BUILDER_REPO_DIR) $(CHROOT_DIR)/tmp/qubes-pkgs-mirror-repo;\
	fi
	
	# Synchronize resolve.conf so that the chroot can resolve hostnames even if it changed
	sudo cp /etc/resolv.conf $(CHROOT_DIR)/etc/resolv.conf

$(CHROOT_DIR)/home/user/.prepared_base:
	@echo "-> Preparing $(DIST) build environment"
	@sudo -E $(ARCHLINUX_PLUGIN_DIR)/prepare-chroot-archlinux $(CHROOT_DIR) $(DIST) || exit 1
	@touch $(CHROOT_DIR)/home/user/.prepared_base
	
dist-prep:
	@true

dist-build-dep:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
	# Add all available package to the custom repository.
	# Or initialize it with a random packages because pacman does not deal correctly with empty repositories
	if [ ! -e "$(BUILDER_REPO_DIR)/pkgs/qubes.db" ]; then \
		sudo cp $(CHROOT_DIR)/var/cache/pacman/pkg/pacman*.pkg.tar.xz "$(BUILDER_REPO_DIR)/pkgs/"; \
	fi
	
	# Remove local qubes packages signatures because pacman will only trust these local packages if no signature is provided
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) su user -c 'cd /tmp/qubes-pkgs-mirror-repo/pkgs; if [ -n "`ls *.asc`" ] ; then rm *.asc ; fi'

	# Generate custom repository metadata based on packages that are available in qubes-pkgs-mirror-repo
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) su user -c 'cd /tmp/qubes-pkgs-mirror-repo; repo-add pkgs/qubes.db.tar.gz pkgs/*.pkg.tar.xz;'
	
	# Ensure that pacman does not check for disk free space because it does not works in chroots
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'sed "s/^CheckSpace/#CheckSpace/g" -i /etc/pacman.conf'
	
	# Update archlinux keyring first so that Archlinux can be updated even after a long time
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'pacman -Sy --noconfirm archlinux-keyring'
	
	# Now update system
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) sh -c 'pacman -Syu --noconfirm'


dist-package:
ifndef PACKAGE
	$(error "PACKAGE need to be set!")
endif
#	rm -rf $(CHROOT_DIR)/$(DIST_SRC)/rpm/*
	echo "Building package in $(DIST_SRC)"
	sudo $(CHROOT_ENV) chroot $(CHROOT_DIR) su user -c 'cd $(DIST_SRC);cp $(PACKAGE)/PKGBUILD* .;makepkg --syncdeps --noconfirm --skipinteg'


dist-copy-out:
	@echo "--> Done:" >&3
	@set -e;\
	for arch_chroot_dir in $(CHROOT_DIR)/$(DIST_SRC)/; do\
		arch_pkg_dir=$(ORIG_SRC)/pkgs;\
		mkdir -p $$arch_pkg_dir;\
		for pkg in $$arch_chroot_dir/*.pkg.tar.xz; do\
			echo "      $$arch_pkg_dir/`basename $$pkg`" >&3 ;\
		done;\
		mkdir -p $(BUILDER_REPO_DIR)/pkgs;\
		ln -f -t $(BUILDER_REPO_DIR)/pkgs $$arch_chroot_dir/*.pkg.tar.xz;\
	done; \
	mv -t $$arch_pkg_dir $$arch_chroot_dir/*.pkg.tar.xz

### Additional targets

# Copies requested packages (based on PACKAGE_SET, COMPONENT, DIST) to
# requested repository (UPDATE_REPO)
update-repo:
ifndef UPDATE_REPO
	$(error "You need to specify destination repo in UPDATE_REPO variable")
endif
ifeq (,$(ARCH_BUILD_DIRS))
	@true
else
	mkdir -p $(UPDATE_REPO)/pkgs
	for arch_build_dir in $(ARCH_BUILD_DIRS); do\
		pkgname=`cat $(ORIG_SRC)/$$arch_build_dir/PKGBUILD | grep pkgname | cut -d "=" -f 2`;\
		ln -f $(ORIG_SRC)/pkgs/$$pkgname-*.pkg.tar.xz $(UPDATE_REPO)/pkgs/;\
	done; \

endif


